/* 
Color pallete. This section defines variables for the color pallete,
so that we can refer to particular colors by name instead of hexadecimal values.
This is applied to the 'root' psuedo-element, which just means that these color
variables are available to be used anywhere in our html document
*/
:root {
    --white-font: #FFFFFF;
    --black-font: #000000;
    --color1: #d1c6ad; 
    --color2: #BBADA0;  
    --color3: #A1A69E;
    --color4: #797596;
    --color5: #0B1D51;  
    /* add in other color variables for color pallete */
}

/* Defines the main container size, we are limiting to 72em max and centring in the viewport */
.main-container {
    max-width: 72em;
    margin: 0 auto;
    font-family: Inter;
    color: var(--white-font);
    /* TODO: set the main font color */
}

/* Here we define the aspects of style of our elements other than their grid layout */
.banner {
    /* TODO: banner styling */
    background-color: var(--color4); 
    padding: 1em; 
}

.banner-title {
    font-size: 3em;
    /* TODO: banner main title font styling */
}

.banner-subtitle {
    font-size: 2.25em;
    padding-left: 4px;
    padding-top: 2px; 
    /* TODO: banner subtitle font styling */
}

.team-member-card {
        /* TODO: style the card as a column based flexbox with rounded corners */
    display: flex; 
    flex-direction: column; 
    overflow: hidden;
}

/* this is the equivalent of setting the image rectangle to "Fill Container" in Figma */ 
.team-member-card-image {
    width: 80%;
    border-radius: 100%;
    padding-bottom: 2em;
    padding-left: 2em;
    
}

.team-member-card-blurb {
    /* TODO: style the blurb with padding */
    background-color: var(--color3);
    padding: 0.5em;
    border-radius: 1em;
    
}

.our-clients-title {
    /* TODO: style the 'Our Clients' text font */
}

/* this is the equivalent of setting the image rectangle to "Fill Container" in Figma */ 
.client-icon {
    width: 100%;
}

/* now we create names for the grid areas for specific elements */
#banner {
    grid-area: ban;
    /* TODO: give the grid-area a name */
}

#teamMemberCard1 {
    /* TODO: give the grid-area a name */
    grid-area: tm1; 
}

#teamMemberCard2 {
    grid-area: tm2;
    /* TODO: give the grid-area a name */
}

#teamMemberCard3 {
    grid-area: tm3;
    /* TODO: give the grid-area a name */
}

#ourClientsTitle {
        /* TODO: give the grid-area a name */
}

#clientIcon1 {
    grid-area: ci1;
    /* TODO: give the grid-area a name */
}

#clientIcon2 {
    grid-area: ci2;
    /* TODO: give the grid-area a name */
}

#clientIcon3 {
    grid-area: ci3;
    /* TODO: give the grid-area a name */
}

#clientIcon4 {
    grid-area: ci4;
    /* TODO: give the grid-area a name */
}

#clientIcon5 {
    grid-area: ci5;
    /* TODO: give the grid-area a name */
}

#clientIcon6 {
    grid-area: ci6;
    /* TODO: give the grid-area a name */
}

#clientIcon7 {
    grid-area: ci7;
    /* TODO: give the grid-area a name */
}

#clientIcon8 {
    grid-area: ci8;
    /* TODO: give the grid-area a name */
}

/* Use a flexible layout grid */
.main-container {
    display: grid;
    column-gap: 1em;
}
  
/* 
Responsive Layout breakpoints. We start 'mobile-first' i.e. we define how the layout should look
for the smallest screen sizes. In this case we want a single column that spans the main container.
Because this CSS definition comes first, it will apply by default. Then we override it below with 
media queries for progressively bigger screen widths
*/
.main-container {
    /* TODO: setup the grid-template for mobile phone layout */
    grid-template:
    "ban ban ban ban" minmax(6em, auto)
    ".    .   .  . "  minmax(2em, auto)
    "tm1 tm1 tm1 tm1" minmax(30em, auto)
    ".    .   .   . " minmax(2em, auto)
    "tm2 tm2 tm2 tm2" minmax(30em, auto)
    ".    .   .   . " minmax(2em, auto)
    "tm3 tm3 tm3 tm3" minmax(30em, auto)
    ".    .   .   . " minmax(2em, auto)
    "oct oct oct oct" minmax(6em, auto)
    ".    .   .   . " minmax(2em, auto)
    "ci1 ci1 ci2 ci2" minmax(6em, auto)
    "ci3 ci3 ci4 ci4" minmax(6em, auto)
    "ci5 ci5 ci6 ci6" minmax(6em, auto)
    "ci7 ci7 ci8 ci8" minmax(6em, auto)

}

@media (min-width: 50em) {
    .main-container {
    grid-template:
    "ban ban ban ban ban ban ban ban" minmax(8em, auto)
    ".    .   .   .   .   .   .   . " minmax(2em, auto)
    "tm1 tm1 tm1 tm1 tm1 tm1 tm1 tm1" minmax(30em,auto)
    ".    .   .   .   .   .   .   . " minmax(2em, auto)
    "tm2 tm2 tm2 tm2 tm2 tm2 tm2 tm2" minmax(30em,auto)
    ".    .   .   .   .   .   .   . " minmax(2em, auto)
    "tm3 tm3 tm3 tm3 tm3 tm3 tm3 tm3" minmax(2em, auto)
    ".    .   .   .   .   .   .   . " minmax(2em, auto)
    "oct oct oct oct oct oct oct oct" minmax(8em, auto)
    ".    .   .   .   .   .   .   . " minmax(2em, auto)
    "ci1 ci1 ci1 ci1 ci2 ci2 ci2 ci2" minmax(16em,auto)
    "ci3 ci3 ci3 ci3 ci4 ci4 ci4 ci4" minmax(16em,auto)
    "ci5 ci5 ci5 ci5 ci6 ci6 ci6 ci6" minmax(16em,auto)
    "ci7 ci7 ci7 ci7 ci8 ci8 ci8 ci8" minmax(16em,auto)
       /* TODO: setup the grid-template for tablet layout */
    }
}

@media (min-width: 75em) {
    .main-container {
        grid-template:
        "ban ban ban ban ban ban ban ban ban ban ban ban" minmax(8em, auto)
        " .   .   .   .   .   .   .   .   .   .   .   . " minmax(2em, auto)
        "tm1 tm1 tm1 tm1 tm2 tm2 tm2 tm2 tm3 tm3 tm3 tm3" minmax(32em, auto)
        " .   .   .   .   .   .   .   .   .   .   .   . " minmax(4em, auto)
        "oct oct oct oct oct oct oct oct oct oct oct oct" minmax(2em, auto)
        " .   .   .   .   .   .   .   .   .   .   .   . " minmax(2em, auto)
        "ci1 ci1 ci1 ci2 ci2 ci2 ci3 ci3 ci3 ci4 ci4 ci4" minmax(8em, auto)
        " .   .   .   .   .   .   .   .   .   .   .   . " minmax(1em, auto)
        "ci5 ci5 ci5 ci6 ci6 ci6 ci7 ci7 ci7 ci8 ci8 ci8" minmax(8em, auto)
        /* TODO: setup the grid-template for desktop layout */
    }
}
